{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3aaa24f0",
   "metadata": {},
   "source": [
    "# A Quantitative Investigation into Dr/Patient Insurance Fraud In the Health Sector and its impact on the insurance in Zimbabwe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e8c0799",
   "metadata": {},
   "source": [
    "## Data collection and processing:\n",
    "\n",
    "1. The application would collect data from various sources, including medical records, insurance claims, and other relevant data.\n",
    "2. The data would be preprocessed to clean and standardize the data, and to extract relevant features for analysis.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8c2cd8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load medical records data\n",
    "medical_data = pd.read_csv('medical_data.csv')\n",
    "\n",
    "# Clean and standardize data\n",
    "medical_data = medical_data.fillna(0) # Fill missing values with zeros\n",
    "medical_data['date'] = pd.to_datetime(medical_data['date']) # Convert date column to datetime format\n",
    "\n",
    "# Extract relevant features\n",
    "medical_data['total_cost'] = medical_data['item_cost'] * medical_data['quantity'] # Calculate total cost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9ee1934",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f0b6e0e4",
   "metadata": {},
   "source": [
    "## Machine learning:\n",
    "    \n",
    "1. The application would use machine learning algorithms to train models to detect fraudulent behavior.\n",
    "2. The application would use supervised learning techniques to train models on a dataset of known fraudulent cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8a0a1900",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load data\n",
    "data = pd.read_csv(\"fraud_data.csv\")\n",
    "\n",
    "# Encode categorical features\n",
    "le = LabelEncoder()\n",
    "data[\"patient_id\"] = le.fit_transform(data[\"patient_id\"])\n",
    "data[\"diagnosis\"] = le.fit_transform(data[\"diagnosis\"])\n",
    "data[\"medication\"] = le.fit_transform(data[\"medication\"])\n",
    "data[\"doctor_name\"]= le.fit_transform(data[\"doctor_name\"])\n",
    "data[\"patient_name\"]= le.fit_transform(data[\"patient_name\"])\n",
    "data[\"claim_date\"]= le.fit_transform(data[\"claim_date\"])\n",
    "\n",
    "\n",
    "\n",
    "# Split data into features and target\n",
    "X = data.drop(\"fraudulent\", axis=1)\n",
    "y = data[\"fraudulent\"]\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Train random forest classifier\n",
    "clf = RandomForestClassifier(n_estimators=100)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "# Predict on test data\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Evaluate classifier\n",
    "accuracy = clf.score(X_test, y_test)\n",
    "\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0da6e66",
   "metadata": {},
   "source": [
    "## Data visualization:\n",
    "    \n",
    "1. The application would use data visualization techniques to present data in a way that is easy to understand and analyze.\n",
    "2. The application could use various visualization libraries, such as Matplotlib or Seaborn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "91619936",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot distribution of total cost\n",
    "plt.hist(medical_data['total_cost'], bins=20)\n",
    "plt.xlabel('Total cost')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5f93f0f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Load data\n",
    "data = pd.read_csv(\"fraud_data.csv\")\n",
    "\n",
    "# Encode categorical features\n",
    "le = LabelEncoder()\n",
    "data[\"patient_id\"] = le.fit_transform(data[\"patient_id\"])\n",
    "data[\"diagnosis\"] = le.fit_transform(data[\"diagnosis\"])\n",
    "data[\"medication\"] = le.fit_transform(data[\"medication\"])\n",
    "data[\"doctor_name\"]= le.fit_transform(data[\"doctor_name\"])\n",
    "data[\"patient_name\"]= le.fit_transform(data[\"patient_name\"])\n",
    "data[\"claim_date\"]= le.fit_transform(data[\"claim_date\"])\n",
    "\n",
    "# Split data into features and target\n",
    "X = data.drop(\"fraudulent\", axis=1)\n",
    "y = data[\"fraudulent\"]\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Train random forest classifier\n",
    "clf = RandomForestClassifier(n_estimators=100)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "# Predict on test data\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Evaluate classifier\n",
    "accuracy = clf.score(X_test, y_test)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "\n",
    "# Create confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix as heatmap\n",
    "sns.heatmap(cm, annot=True, cmap=\"Blues\")\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"Actual\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6405636d",
   "metadata": {},
   "source": [
    "This will produce a heatmap where the true labels are on the y-axis and the predicted labels are on the x-axis. The color of each cell indicates the number of samples that fall into that category. The diagonal represents the number of correctly classified samples, while the off-diagonal elements represent the number of misclassified samples. The annot=True argument adds the counts to each cell."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dc107b2",
   "metadata": {},
   "source": [
    "### More visualization\n",
    "\n",
    "How to visualize the fraudulent and non-fraudulent records using a graph and a table:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "46ea5d3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   count\n",
      "fraudulent_status       \n",
      "Fraudulent             2\n",
      "Not Fraudulent         3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load data\n",
    "data = pd.read_csv(\"fraud_data.csv\")\n",
    "\n",
    "# Split data into features and target\n",
    "X = data.drop(\"fraudulent\", axis=1)\n",
    "y = data[\"fraudulent\"]\n",
    "\n",
    "# Create a new column indicating whether the record is fraudulent or not\n",
    "data[\"fraudulent_status\"] = [\"Fraudulent\" if f == 1 else \"Not Fraudulent\" for f in data[\"fraudulent\"]]\n",
    "\n",
    "# Group data by fraudulent status\n",
    "grouped_data = data.groupby(\"fraudulent_status\")\n",
    "\n",
    "# Create a bar plot of fraudulent vs. non-fraudulent records\n",
    "fig, ax = plt.subplots()\n",
    "ax.set_title(\"Fraudulent vs. Non-Fraudulent Records\")\n",
    "ax.set_xlabel(\"Fraudulent Status\")\n",
    "ax.set_ylabel(\"Count\")\n",
    "grouped_data.size().plot(kind=\"bar\", ax=ax)\n",
    "\n",
    "# Create a table showing the fraudulent and non-fraudulent records\n",
    "table_data = grouped_data.size().reset_index(name=\"count\")\n",
    "table_data.set_index(\"fraudulent_status\", inplace=True)\n",
    "print(table_data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48cdc4b1",
   "metadata": {},
   "source": [
    "## Real-time alerts:\n",
    "    \n",
    "1. The application would be programmed to provide real-time alerts to insurance companies or other relevant authorities when it detects any suspicious behavior.\n",
    "2. The application could use email or SMS alerts to notify authorities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43a00485",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Java Code\n",
    "import smtplib\n",
    "\n",
    "# Send email alert\n",
    "sender_email = 'fraud_alerts@example.com'\n",
    "receiver_email = 'insurance_company@example.com'\n",
    "message = 'Possible insurance fraud detected!'\n",
    "server = smtplib.SMTP('smtp.gmail.com', 587)\n",
    "server.starttls()\n",
    "server.login(sender_email, 'password')\n",
    "server.sendmail(sender_email, receiver_email, message)\n",
    "server.quit()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6696607d",
   "metadata": {},
   "source": [
    "## Security:\n",
    "1. The application would be designed with encryption and other security controls to ensure the privacy and security of patient data.\n",
    "2. The application could use encryption libraries, such as Cryptography, to encrypt sensitive data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6312857e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#kotlin Code\n",
    "import cryptography.fernet as fernet\n",
    "\n",
    "# Encrypt sensitive data\n",
    "key = fernet.Fernet.generate_key()\n",
    "cipher_suite = fernet.Fernet(key)\n",
    "encrypted_data = cipher_suite.encrypt(b'sensitive_data')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
